[{"path":"https://cneyens.github.io/raem/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 raem authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"introduction-to-analytic-element-modeling","dir":"Articles","previous_headings":"","what":"Introduction to analytic element modeling","title":"Overview","text":"First developed Otto Strack Henk Haitjema late 1970’s, analytic element modeling (AEM) approach solves groundwater flow problem superposition analytical solutions features wells, streams recharge. feature called element. superimposing individual solutions, combined effect elements can calculated point space. arbitrary number elements can placed location flow field. , AEM method flexible single analytical solutions can used solve complex cases. Compared numerical solutions groundwater flow problem, AEM method relatively fast easy use suffer numerical instability mass balance errors. Furthermore, require spatial grid, making relatively scale-insensitive results can obtained scale zoom-level feature geometries depend priori chosen model resolution. AEM method therefore often used screening studies, regional groundwater flow modeling (often first step), “computational laboratory” checking hypotheses, educational tool. Flow governed Dupuit-Forchheimer approximation states hydraulic head hh hydrostatic point horizontal plane. words, variation hh along vertical axis horizontal flow evenly distributed along vertical axis. reduces dimensions problem, solution now depends xx yy coordinates. Although vertical gradients, vertical flow can still computed mass balance considerations, .e. areal recharge aquifer top leakage aquifer bottom. Additionally phreatic aquifers, curvature water-table induces vertical flow components. Besides Dupuit-Forchheimer assumption, aquifer assumed infinite lateral extent, horizontal top base homogeneous scale interest. practice, assumptions appear (approximately) valid cases groundwater system consideration much wider thick, true regional aquifer systems. Groundwater flow systems predominantly horizontal. areas considerable vertical flow, near groundwater divides near partially penetrating wells streams, flow system similar thickness width (width<≈3*thickness)(width\\lt~\\approx 3*thickness), Dupuit-Forchheimer approximation valid different method used, e.g. numerical model 3D groundwater flow equation.","code":""},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"solution-method","dir":"Articles","previous_headings":"Introduction to analytic element modeling","what":"Solution method","title":"Overview","text":"steady-state, single-layer Dupuit-Forchheimer flow horizontal plane, governing equation : T∂2h∂x2+T∂2h∂y2+N=0 T\\frac{\\partial^2{h}}{\\partial x^2} + T\\frac{\\partial^2{h}}{\\partial y^2} + N = 0 TT aquifer transmissivity [L2/T][L^2/T], equal kHkH kk horizontal hydraulic conductivity [L/T][L/T] HH saturated thickness [L][L], hh hydraulic head [L][L] NN sink/source term [L/T][L/T]. aquifer phreatic, saturated thickness HH variable depends hh, renders flow equation non-linear solving hh. Therefore, discharge potential Φ[L3/T]\\Phi~[L^3/T] introduced governing flow equation becomes: ∂2Φ∂x2+∂2Φ∂y2+N=0 \\frac{\\partial^2{\\Phi}}{\\partial x^2} + \\frac{\\partial^2{\\Phi}}{\\partial y^2} + N = 0 linear equation can solved Φ\\Phi. resulting hydraulic heads can computed : Φ=kHh−(12kH2+kHzb)h≥ztΦ=12k(h−zb)2zb<h<zt \\begin{aligned} \\Phi &= kHh - (\\frac{1}{2}kH^2 + kHz_b) &\\qquad h \\ge z_t \\\\ \\Phi &= \\frac{1}{2}k(h - z_b)^2 &\\qquad z_b \\lt h \\lt z_t \\end{aligned} ztz_t zbz_b aquifer top bottom elevation [L][L], respectively. addition discharge potential Φ\\Phi, exists stream function Ψ[L3/T]\\Psi~[L^3/T] defined function constant along streamlines whose difference two points equal amount water flowing two points. convention, stream function increases right looking direction flow. can used visualize amount flow groundwater system, e.g. constructing flow nets. Ψ\\Psi defined Laplace equation, .e. NN zero. modeling terms, means specified outside area-sinks (see paragraph Area-sink ). discharge potential Φ\\Phi stream function Ψ\\Psi fulfill Cauchy-Riemann conditions can therefore combined complex potential Ω\\Omega whose real imaginary terms Φ\\Phi Ψ\\Psi, respectively. solving flow problem terms Ω\\Omega, Φ\\Phi Ψ\\Psi solved simultaneously complex plane, described complex coordinate ζ=x+iy\\zeta=x+iy. solution terms Ω\\Omega yields Φ\\Phi eventually hh. negative derivative Ω\\Omega respect ζ\\zeta complex discharge WW, whose real component QxQ_x whose negative imaginary component QyQ_y, .e. xx yy components discharge vector Q[L2/T]Q~[L^2/T]. QQ represents amount flow aquifer integrated along vertical (, alternatively, first derivative Φ\\Phi xx yy directions). vertical component QzQ_z determined mass balance considerations discussed . Darcy flux q[L/T]q~[L/T] (also called specific discharge Darcy velocity) computed Q/HQ/H. average linear flow velocity v[L/T]v~[L/T] computed q/nq/n nn aquifer porosity, represent effective porosity. element gives solution governing flow equation terms Ω\\Omega, well complex discharge WW. element one free parameters, e.g. discharge well element. parameters may user-specified priori unknown, case need computed conditions, e.g. specified head. parameters specified called collocation points control points. Since solution given unknown element parameter depends results elements, complete system equations needs solved simultaneously unknowns. done setting flow equations collocation points matrix form Ax=bAx=b, solved unknown parameter vector xx. element parameters known, contributions element complex potential Ω\\Omega complex discharge WW point can calculated superimposed form resulting Ω\\Omega WW values, yield variables interest hh QQ. complete overview analytic element modeling, reader referred Haitjema (1995), Strack (1989), Strack (2003) Hunt (2006).","code":""},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"elements","dir":"Articles","previous_headings":"","what":"Elements","title":"Overview","text":"overview elements available raem provided. can specify many elements like, keep mind solution matrix increases size every unknown element parameter. Currently, every head-specified element raem supplies one unknown parameter solution matrix. elements user-specified (.e. known) parameters. create AEM model raem, first need load raem specify aquifer parameters. porosity value required velocity().","code":"library(raem)  k = 10     # hydraulic conductivity, m/d top = 10   # aquifer top elevation, m base = -15 # aquifer bottom elevation, m n = 0.2    # aquifer effective porosity, -"},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"well","dir":"Articles","previous_headings":"Elements","what":"Well","title":"Overview","text":"simplest element well specified discharge QQ, can created well() function. requires xx yy coordinate well pumping rate QQ (positive withdrawal). well radius rwr_w can also specified (default 0.30.3 length units). Inside well annulus defined rw,r_w, solution undefined. output variable requested inside circle, location projected onto nearest point outer annulus. assumed well screened across full (saturated) aquifer. example, specify two extraction wells. create model call aem(). function needs aquifer parameters elements. can supply elements individually put single list(). aem() function automatically solves system equations calling solve.aem(). default, model variable saturated thickness depends calculated head. can change setting type = 'confined' force model use constant saturated thickness, set equal aquifer thickness. may useful want force system equations remain linear elements hydraulic resistance supplied (see ). Finally, create contouring grid plot head contours blue streamlines orange using contours(). Note ugly branch cuts (AEM jargon) streamlines extending well centers towards negative x-axis, artifact contouring stream function.","code":"# create well elements w1 = well(x = 200, y = 0, Q = 300)    w2 = well(x = -200, y = 0, Q = 1000)  # create the model. This automatically solves the system of equations. m = aem(k = k, top = top, base = base, n = n, w1, w2)  # set up the contouring grid  xg = seq(-600, 600, length = 100) yg = seq(-300, 300, length = 100)  # plot head contours and streamlines contours(m, xg, yg, col = 'dodgerblue', nlevels = 20, drawlabels = FALSE) contours(m, xg, yg, variable = 'streamfunction', col = 'orange',          nlevels = 20, drawlabels = TRUE, add = TRUE)"},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"head-specified-well","dir":"Articles","previous_headings":"Elements > Well","what":"Head-specified well","title":"Overview","text":"effect head-specified well can simulated instead supplied discharge rate, hydraulic head remains fixed well location. , element parameter well, discharge QQ, needs calculated solution procedure. element can created headwell(). addition well coordinates xwx_w ywy_w, specified head hch_c control point needs supplied. default, control point coincides well’s location. Alternatively, specify location somewhere else setting xcx_c ycy_c coordinates. creates well location xw−ywx_w-y_w calculated discharge head location xc−ycx_c-y_c equals hch_c. case well element , well radius can specified well control point. Lastly, hydraulic resistance control point location can also supplied resistance argument (see also Head-specified line-sink section ). solving unknown element parameters, reference point needs added model created constant() function. explained detail (Reference point). example, two head-specified wells created. second well control point different location well location. can get computed discharge elements accessing parameter value element list elements inside model object. alternative (easier) method use element_discharge().","code":"# create head-specified wells hw1 = headwell(xw = 300, yw = 100, hc = 6) hw2 = headwell(xw = -200, yw = -100, xc = 0, yc = 0, hc = 7)  # create reference point element rf = constant(x = -1000, y = 0, h = 8)  # create and solve model m = aem(k, top, base, n, hw1, hw2, rf)   # plot head contours contours(m, xg, yg, col = 'dodgerblue', nlevels = 20) # computed discharge of hw1 m$elements$hw1$parameter #> [1] 292.5061  # computed discharge of hw2 element_discharge(m, name = 'hw2') #>      hw2  #> 779.7601"},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"reference-point","dir":"Articles","previous_headings":"Elements","what":"Reference point","title":"Overview","text":"solving unknown element parameters, -called reference point (reference head) needs added model order enough equations matrix formulation solve unknowns. constant value added hydraulic head values. can created constant() function needs xx yy coordinate reference head hch_c. important understand reference point actual aquifer feature, mathematical necessity. Therefore, value location chosen way influence results much. general, reference point never placed inside zone interest (called “near-field” AEM lingo). placed far-field given “neutral” head value induce unrealistic gradients towards near-field.","code":""},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"line-sink","dir":"Articles","previous_headings":"Elements","what":"Line-sink","title":"Overview","text":"Line-sinks elements line geometry can used simulate groundwater flow surface water features streams canals. parameter line-sink strength σ\\sigma, defined total flow /line-sink per unit length line [L2/T][L^2/T] (positive going line-sink). parameter defined collocation point center line-sink. , single line-sink created using linesink(). addition start- endpoints line-sink x0−y0x_0-y_0 x1−y1x_1-y_1, strength parameter needs specified. Optionally, width can also given, strength-specified line-sink used particle tracking determine particles reached line. Note locations elements aem object line point geometries (except reference point) can plotted using plot.aem() method. Individual element locations can always plotted calling plot.element() respective element object.","code":"# create line-sink ls = linesink(x0 = -200, y0 = 200, x1 = 200, y1 = -200, sigma = 5)  # create and solve the model m = aem(k, top, base, n, ls)  # plot head contours and line-sink geometry contours(m, xg, yg, col = 'dodgerblue', nlevels = 20, drawlabels = FALSE) plot(m, add = TRUE)"},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"head-specified-line-sink","dir":"Articles","previous_headings":"Elements > Line-sink","what":"Head-specified line-sink","title":"Overview","text":"Although useful, strength-specified line-sinks often used modeling applications since discharge /streams often unknown. Head-specified line-sinks hand widely used AEM studies, represent streams surface water features known water levels. absence numerical grid makes straightforward implement complex stream geometries. head-specified line-sink can created headlinesink(). addition start- endpoints line, hydraulic head collocation point needs given, located center line-sink. line-sink strength unknown calculated solving system equations. aquifer head head line-sink, line-sink draining aquifer (positive line-sink strength σ\\sigma). aquifer head line-sink head, line-sink discharging aquifer. raem, zeroth order line-sinks used, result constant strength along line, thus varying head. , single stream constant head approximated many short line-sinks. AEM codes may use higher order line elements strength can vary along line. default, line-sink assumed full hydraulic contact aquifer fully penetrates entire saturated depth. Alternatively, hydraulic resistance may specified aquifer line-sink representing effect low-permeability connection due e.g. fine-grained streambed sediments. Additionally, width parameter used conjunction resistance parameter calculate hydraulic conductance. model variably-saturated thickness (type = 'variable' aem(); default), renders system equations non-linear. , outer iteration loop entered, default 10 iterations (see also aem() solve.aem()). discussed , setting type = 'confined' keeps system linear case outer iteration needed. general rule thumb, line-sinks far-field resistance width values specified, act constant-head boundaries fix head far-field. Line-sinks near-field hand resistances widths specified give realistic representation surface water features area. example, single stream modeled several head-specified line-sinks. bundled list() element supplied model. reference point also needs added. Information iteration loop printed setting verbose = TRUE aem() call.","code":"el = list(rf = rf) # list of elements nls = 10           # number of line-sinks xls = seq(-700, 700, length = nls + 1) # x-coordinates of line-sinks yls = c(rep(c(-25, 25), nls), -25)     # y-coordinates of line-sinks hc = 7             # stream level, m res = 2            # hydraulic resistance of streambed, days width = 3          # stream width, m  # create head-specified line-sinks for(i in seq(nls)) {   hl = headlinesink(x0 = xls[i],                      x1 = xls[i + 1],                      y0 = yls[i],                     y1 = yls[i + 1],                     hc = hc,                     resistance = res,                     width = width)   el[[paste0('hls_', i)]] = hl }  # create and solve model m = aem(k, top, base, n, el, verbose = TRUE) #> Solving analytic element model ...  #>  Non-linear model with 11 elements and 11 unknowns  #>  Entering outer iteration loop ...  #>   Iteration 1  #>   Iteration 2  #>   Iteration 3  #>   Iteration 4  #>   Iteration 5  #>   Iteration 6  #>   Iteration 7  #>   Iteration 8  #>   Iteration 9  #>   Iteration 10  #> Model solved  # plot head contours contours(m, xg, yg, col = 'dodgerblue', nlevels = 10) plot(m, add = TRUE)"},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"area-sink","dir":"Articles","previous_headings":"Elements","what":"Area-sink","title":"Overview","text":"Area-sinks circular elements can added top bottom model. provide constant flux can used simulate areal recharge leakage aquifer base. circular geometry sufficient long disc covers entire area interest heads inside fixed head-specified elements. parameter specified flux value N [L/T][L/T], defined center area-sink applied uniformly across entire disc. Use area-sink introduces vertical flow components, besides ones occur due curvature water-table phreatic aquifer variably saturated thickness used aem() model. Note stream function give reasonable results inside area covered area-sink, discussed . areasink() function requires center coordinates circular area-sink, well flux value N (positive aquifer, note differs elements) radius R. value R important long large enough disc covers modeled region. default, area-sink placed aquifer top, can overridden setting location = 'base'. illustrate effect area-sink providing areal recharge aquifer top, example head-specified line-sinks used area-sink added. Note increased head values compared case without recharge.","code":"# add area-sink to list of elements el$as = areasink(x = 0, y = 0, N = 0.001, R = 1000)   # create and solve the model m = aem(k, top, base, n, el)  # plot head contours contours(m, xg, yg, col = 'dodgerblue', nlevels = 10) plot(m, add = TRUE)"},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"head-specified-area-sink","dir":"Articles","previous_headings":"Elements > Area-sink","what":"Head-specified area-sink","title":"Overview","text":"Similar line-sinks head-specified line-sinks, area-sink can also given specified head. constant flux needs calculated solving system equations. Since head specified center disc, computed flux calculated head gradient location applied entire circular area. example useful simulate ponds wetlands limited areal extent. large lakes hand, better representation create series head-specified line-sinks along lake boundary, groundwater interaction occurs type surface water features. headareasink() function creates head-specified area-sink element. Similar headlinesink(), resistance parameter determines hydraulic resistance aquifer area-sink. also renders system equations non-linear aquifer variable saturated thickness (type = 'variable' aem()). illustrate use, leakage small, circular pond simulated using head-specified area-sink applied model two extraction wells created earlier.","code":"# create head-specified area-sink has = headareasink(x = 0,                     y = 200,                     h = 5,                     resistance = 1,                     R = 100)  # create and solve model m = aem(k, top, base, n, w1, w2, rf, has)  # plot head contours and area-sink geometry contours(m, xg, yg, col = 'dodgerblue', nlevels = 20) plot(has, add = TRUE, col = adjustcolor('grey50', alpha = 0.5))"},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"uniform-flow","dir":"Articles","previous_headings":"Elements","what":"Uniform flow","title":"Overview","text":"element can created models specified, uniform background flow aquifer. general, regional gradient modeled including head-specified surface water elements induce background flow model. certain applications however, may useful specify uniform background flow explicitly, e.g. regional system fully included model. can done using uniformflow(). requires transmissivity value remains constant entire domain (.e. constant saturated thickness independent simulated heads), gradient positive direction flow, angle degrees counterclockwise positive x-axis:","code":"# create uniform flow element uf = uniformflow(TR = k * (top - base), gradient = 0.001, angle = -30)  # create model m = aem(k, top, base, n, uf, rf)  # plot head contours contours(m, xg, yg, col = 'dodgerblue', nlevels = 20)  # add stream lines contours(m, xg, yg, variable = 'streamfunction',           col = 'orange', nlevels = 20, add = TRUE)"},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"setting-up-a-model","dir":"Articles","previous_headings":"","what":"Setting up a model","title":"Overview","text":"example, analytic element model created phreatic system two wells near stream full hydraulic contact aquifer. stream approximately straight flowing south north along x=0x=0, stream level decreasing direction flow. stream divided segments shorter near well . sandy aquifer approximately horizontal bottom elevation, can considered homogeneous scale purpose modeling exercise. Areal recharge simulated using area-sink. add_element() function used add elements initially empty model. elements added, model needs solved explicit call solve.aem(). useful adding elements model loop pipeline.  major benefit AEM approach numerical grid domain needed. allows zoom area interest without altering rerunning model, illustrated plot inset area around well (green rectangular first plot).","code":"# aquifer parameters ---- k = 15          # hydraulic conductivity, m/d top = 20        # aquifer top elevation, m base = -10      # aquifer bottom elevation, m n = 0.2         # aquifer effective porosity, -  N = 0.2 / 365   # areal recharge rate, m/d res = 2         # streambed resistance, d width = 5       # stream width, m hr = 17.5       # stream level at head of stream, m hrg = 0.0005    # gradient of stream level, - href = 18.5     # head at reference point, m  # stream coordinates and water level yriv = c(seq(-1000, -300, by = 200),          seq(-200, 200, by = 20),          seq(300, 1000, by = 200)) hriv = hr - (yriv - yriv[1]) * hrg nls = length(yriv)  # create elements ---- wA = well(x = -300, y = 0, Q = 550) wB = well(x = -500, y = -300, Q = 450) as = areasink(x = -50, y = 0, N = N, R = 2000) rf = constant(x = 1000, y = -1000, h = 18.5)  # create model ---- m = aem(k, top, base, n) |> # first, create model with no elements   add_element(wA) |>        # add elements   add_element(wB) |>   add_element(as) |>    add_element(rf)  # add head-specified line-sinks in a loop for(i in seq(nls - 1)) {   hls = headlinesink(x0 = 0,                       x1 = 0,                       y0 = yriv[i],                      y1 = yriv[i + 1],                      h = hriv[i],                      resistance = res,                      width = width   )   m = add_element(m, hls, name = paste('stream', i, sep = '_')) }  # solve m = solve(m)  # view head contours ---- xg = seq(-800, 300, length = 100) yg = seq(-600, 300, length = 100)  contours(m, xg, yg, col = 'dodgerblue', levels = seq(16, 18.5, 0.1), labcex = 0.8,          xlab = 'x (m)', ylab = 'y (m)') plot(m, add = TRUE) polygon(x = c(-500, 50, 50, -500), y = c(-200, -200, 150, 150), border = 'forestgreen') grid() # add gridlines to plot # view inset near well A xg = seq(-500, 50, length = 100) yg = seq(-200, 150, length = 100)  contours(m, xg, yg, col = 'dodgerblue', levels = seq(16, 18, 0.05), labcex = 0.8,          xlab = 'x (m)', ylab = 'y (m)') grid()  # plot control points of line-sinks for(i in m$elements) {   if(inherits(i, 'linesink')) {     plot(i, add = TRUE, use.widths = FALSE)     points(i$xc, i$yc, pch = 16, cex = 0.8)    } }"},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Overview","text":"Hydraulic heads aem object x y location can obtained heads() (confused utils::head()). x y arguments recycled. setting .grid = TRUE, grid head values obtained using x y values marginal grid vectors: Similar functions exist discharge potential Φ\\Phi (potential()), complex potential Ω\\Omega (omega()) stream function Ψ\\Psi (streamfunction()). heads, potentials stream function can contoured setting variable argument contours() (defaults \"heads\"). plot cross-section water-table, simply compute head values points along profile line plot:  components discharge vector QQ x, y z coordinate obtained aem object discharge() function. Values positive increasing axis value. specified z coordinate water-table aquifer top, aquifer base, NA's returned z component warning. Similar state-variables discussed , .grid can set TRUE obtain output grid given x, y z vectors. Furthermore, setting magnitude = TRUE return additional column vector’s magnitude, defined Euclidean norm vector components. Similar functions exist Darcy flux qq (darcy()) average linear flow velocity vv (velocity()). latter uses aquifer porosity value set aem object. Additionally, retardation coefficient RR can specified (defaults 1, .e. retardation), case apparent velocity v*=v/Rv^*=v/R used instead vv.","code":"heads(m, x = c(-350, -200), y = -100) #> [1] 17.46994 17.44073  # as a grid heads(m, x = seq(-500, -100, length = 8), y = seq(-200, 100, 60), as.grid = TRUE) #>          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8] #> [1,] 17.78207 17.68756 17.58476 17.48926 17.44123 17.44028 17.44520 17.43943 #> [2,] 17.74401 17.63636 17.50049 17.31946 17.27566 17.36877 17.41453 17.42836 #> [3,] 17.71670 17.60830 17.46713 17.23316 17.19484 17.35159 17.41181 17.43322 #> [4,] 17.69875 17.60562 17.50487 17.40761 17.37671 17.41047 17.44189 17.45568 #> [5,] 17.67895 17.60743 17.54704 17.50030 17.47868 17.48040 17.48826 17.49047 #> [6,] 17.63721 17.59317 17.57253 17.55656 17.54577 17.54085 17.53762 17.53121 xprofile = seq(-800, 400, length = 1000) hprofile = heads(m, x = xprofile, y = -100)  plot(xprofile, hprofile, type = 'l', xlab = 'x (m)', ylab = 'head (m)') discharge(m, x = c(-350, -200), y = -100, z = 15) #>              Qx        Qy          Qz #> [1,]  0.5337762 0.5528572 -0.01500301 #> [2,] -0.1751007 0.4348954 -0.01418512  # NA's for z-component discharge(m, x = c(-350, -200), y = -100, z = top)  #> Warning: Setting Qz values to NA for z above saturated aquifer level or below #> aquifer base #>              Qx        Qy Qz #> [1,]  0.5337762 0.5528572 NA #> [2,] -0.1751007 0.4348954 NA  # as.grid str(discharge(m,                x = seq(-350, -200, length = 5),                y = seq(-200, -100, length = 4),               z = c(10, 15, length = 3),               as.grid = TRUE)) #>  num [1:4, 1:5, 1:3, 1:3] 0.534 0.353 0.223 0.113 0.303 ... #>  - attr(*, \"dimnames\")=List of 4 #>   ..$ : NULL #>   ..$ : NULL #>   ..$ : NULL #>   ..$ : chr [1:3] \"Qx\" \"Qy\" \"Qz\"  # magnitude discharge(m, x = c(-350, -200), y = -100, z = 15, magnitude = TRUE) #>              Qx        Qy          Qz         Q #> [1,]  0.5337762 0.5528572 -0.01500301 0.7686307 #> [2,] -0.1751007 0.4348954 -0.01418512 0.4690367"},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"particle-traces","dir":"Articles","previous_headings":"","what":"Particle traces","title":"Overview","text":"Tracelines particles can computed using tracelines(). tracks particle locations flow field numerically integrating velocity vector calculated velocity(). connecting locations particle time, traceline can drawn. Besides aem object, initial x, y z locations particle need specified. initial z location water-table aquifer top, aquifer base, reset nearest boundary warning. times argument numeric vector requested tracking times. output list matrices (one particle) columns time, x, y z, containing tracking time particle location. final row represents particle’s location final time , terminated prematurely, time termination. Termination occurs particle enters well’s inner radius, crosses draining line-sink, exits leakage aquifer bottom top, represented water-table phreatic aquifer. single matrix final particle locations can obtained output tracelines() using endpoints() function. output tracelines() can plotted using plot.tracelines(). endpoints can simply added using points().  Backward particle tracking can performed setting forward = FALSE. retardation coefficient R can passed velocity(). plotting tracelines plot.tracelines(), markers specified time interval can placed setting marker desired interval, e.g. every 180 days.  Lastly, particle tracking can computationally expensive. Since particles independent one another, computations embarrassingly parallel however. tracelines() allows parallel computation particle traces setting ncores argument larger zero. distributes calculations among ncores cores using parallel package, one base packages R. examples particle tracking, see tracelines() documentation.","code":"# calculate particle traces paths = tracelines(m,                     x0 = -600,                     y0 = seq(-200, 200, 50),                    z0 = top,                     times = seq(0, 5 * 365, 365 / 10)) # 10 steps per year for 5 years #> Warning: Resetting z0 values above saturated aquifer level or below aquifer #> base  # plot head contours and element geometries around well A xg = seq(-600, 100, length = 100) yg = seq(-200, 200, length = 100)  contours(m, xg, yg, col = 'dodgerblue', nlevels = 20) plot(m, add = TRUE)  # add tracelines to plot plot(paths, add = TRUE, col = 'orange')  # compute and plot endpoints endp = endpoints(paths) points(endp[,c('x', 'y')]) # compute backward particle tracking with retardation backward = tracelines(m,                        x0 = -250,                        y0 = -50,                        z = 10,                        forward = FALSE,                        R = 1.5,                        times = seq(0, 5 * 365, 365 / 10))  # plot the head contours and element geometries around well A contours(m, xg, yg, col = 'dodgerblue', nlevels = 20) plot(m, add = TRUE)  # plot backward particle trace with a marker every 1.5 years plot(backward, col = 'forestgreen', add = TRUE, marker = 1.5 * 365)"},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"capture-zone","dir":"Articles","previous_headings":"Particle traces","what":"Capture zone","title":"Overview","text":"special case particle tracking capture zone delineation well. can done using capzone(), thin wrapper around tracelines() places npar evenly distributed particles around well’s radius tracks back time using time steps length dt requested capture time reached. plotting tracelines, capture zone can delineated. Initial particle locations placed aquifer base (zstart argument). Different results may obtained models vertical flow components placing initial particle locations different zstart values. increasing amount particles decreasing time step length, sharper delineation capture zone envelope may obtained.","code":"# 5-year capture zone of well A cpA_5 = capzone(m, wA, time = 5 * 365, npar = 10)   # plot head contours and element geometries xg = seq(-800, 300, length = 100) yg = seq(-600, 300, length = 100)  contours(m, xg, yg, col = 'dodgerblue', nlevels = 20) plot(m, add = TRUE)  # plot capture zone output plot(cpA_5, add = TRUE)"},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"additional-functionality","dir":"Articles","previous_headings":"","what":"Additional functionality","title":"Overview","text":"raem contains additional functionality may useful cases. listed . Examples shown respective documentation pages. satthick() calculates saturated thickness aquifer given x y locations. confined aquifer, saturated thickness always equals aquifer thickness. dirflow() computes flow variable (discharge QQ, Darcy flux qq velocity vv) direction given angle. may useful see amount flow certain direction besides parallel x, y z axes. flow_through_line() calculates amount flow passing straight line numerically integrating requested flow variable (QQ qq). shown , element_discharge() gets computed discharge ([L3/T][L^3/T]) given element element type, positive discharge aquifer.","code":""},{"path":"https://cneyens.github.io/raem/articles/vign-01-overview.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Overview","text":"references given end Introduction analytic element modeling highly recommended anyone wanting learn analytic element modeling theory applications. Bakker & Post (2022) another book serves great introduction analytic element modeling, analytical groundwater flow modeling general. raem started R implementation material book. Readers familiar Bakker & Post (2022), author’s work, therefore find familiarity naming conventions general coding structure raem.","code":""},{"path":"https://cneyens.github.io/raem/articles/vign-02-export-spatial.html","id":"create-an-example-aem-model","dir":"Articles","previous_headings":"","what":"Create an example AEM model","title":"Exporting spatial data","text":"example model, two extraction wells phreatic aquifer uniform background flow areal recharge modeled. output grid defined head contours plotted.","code":"library(raem)  # aquifer parameters k = 10    # hydraulic conductivity, m/d top = 30  # aquifer top elevation, m base = 0  # aquifer bottom elevation, m n = 0.2   # aquifer effective porosity, -  # create elements w1 = well(x = -500, y = 100, Q = 1000) w2 = well(x = 300, -200, Q = 1200) as = areasink(x = 0, y = 0, R = 1500, N = 0.3 / 365) uf = uniformflow(TR = k * (top - base), gradient = 0.002, angle = -135) # SW direction rf = constant(x = 1000, y = 1000, h = 25)  # create and solve model m = aem(k, top, base, n, w1, w2, as, uf, rf)  # output grid xg = seq(-1200, 1000, length = 100) yg = seq(-700, 500, length = 100)  # plot head contours contours(m, xg, yg, col = 'dodgerblue', nlevels = 20, labcex = 0.8,          xlab = 'x (m)', ylab = 'y (m)')"},{"path":"https://cneyens.github.io/raem/articles/vign-02-export-spatial.html","id":"exporting-as-spatial-vector-data","dir":"Articles","previous_headings":"","what":"Exporting as spatial vector data","title":"Exporting spatial data","text":"contours can exported spatial vector format using sf isoband packages. sf widely used R community handle spatial vector data. isoband lightweight package containing fast contouring algorithms used .. ggplot2. contouring grid variable interest required. Optionally, origin raem model grid (x,y)=(0,0)(x, y) = (0,0) can specified projected coordinate system exported contours georeferenced. set contour lines generated isoband::isolines() converted sf simple feature geometry collection, can used simple feature geometry column sf simple feature object.  export sf object disk, sf package provides write_sf() function:","code":"library(sf) library(isoband)  # create a 10 by 10 m contouring grid and get the heads as a grid xg = seq(-1200, 1000, by = 10) yg = seq(-700, 500, by = 10)  h = heads(m, xg, yg, as.grid = TRUE)  # optionally, set the x and y origin corresponding to (0, 0)  # in the requested coordinate system xorigin = 195600 yorigin = 203500 epsg = 31370  # create the isolines with the specified levels # the y-coordinates need to be reversed here for isolines() lvls = seq(13.5, 24.5, by = 0.5) isolines = isolines(xg + xorigin,                      rev(yg) + yorigin,                     h,                     levels = lvls)  # convert to sfg object, create sfc column for sf object isolines_sf = st_sf(level = as.numeric(names(isolines)),                     geometry = st_sfc(iso_to_sfg(isolines)),                     crs = epsg)  plot(isolines_sf) # export as shapefile write_sf(isolines_sf, 'isolines.shp')"},{"path":"https://cneyens.github.io/raem/articles/vign-02-export-spatial.html","id":"exporting-as-spatial-raster","dir":"Articles","previous_headings":"","what":"Exporting as spatial raster","title":"Exporting spatial data","text":"create export output spatial raster object GeoTIFF, terra package can used. package replacement older, widely popular raster package. Similar creation spatial vector object, grid values variable interest (hydraulic head) needs specified. Optionally, origin coordinates can given georeference output. extent raster needs specified explicitly range marginal grid vectors.  export raster disk, use writeRaster() function terra package:","code":"library(terra)  # set extent and create raster extent = c(range(xg) + xorigin, range(yg) + yorigin) r = rast(h, crs = paste('epsg', epsg, sep = ':'), extent = ext(extent))  # plot plot(r) writeRaster(r, 'heads.tiff', overwrite = TRUE)"},{"path":"https://cneyens.github.io/raem/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cas Neyens. Author, maintainer, copyright holder.","code":""},{"path":"https://cneyens.github.io/raem/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Neyens C (2024). raem: Analytic Element Modeling Steady Single-Layer Groundwater Flow. R package version 0.1.0, https://cneyens.github.io/raem/, https://github.com/cneyens/raem.","code":"@Manual{,   title = {raem: Analytic Element Modeling of Steady Single-Layer Groundwater Flow},   author = {Cas Neyens},   year = {2024},   note = {R package version 0.1.0, https://cneyens.github.io/raem/},   url = {https://github.com/cneyens/raem}, }"},{"path":"https://cneyens.github.io/raem/index.html","id":"raem-","dir":"","previous_headings":"","what":"Analytic Element Modeling of Steady Single-Layer Groundwater Flow","title":"Analytic Element Modeling of Steady Single-Layer Groundwater Flow","text":"raem R package modeling steady-state, single-layer groundwater flow Dupuit-Forchheimer assumption using analytic elements.","code":""},{"path":"https://cneyens.github.io/raem/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analytic Element Modeling of Steady Single-Layer Groundwater Flow","text":"install released version: development version raem can installed GitHub :","code":"install.packages(\"raem\") # install.packages(\"devtools\") devtools::install_github(\"cneyens/raem\")"},{"path":"https://cneyens.github.io/raem/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Analytic Element Modeling of Steady Single-Layer Groundwater Flow","text":"package documentation can found https://cneyens.github.io/raem/.","code":""},{"path":"https://cneyens.github.io/raem/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Analytic Element Modeling of Steady Single-Layer Groundwater Flow","text":"Construct analytic element model aquifer uniform background flow, two extraction wells reference point. Specify aquifer parameters create elements: Create model. automatically solves system equations. Find head discharge two locations: x = -200, y = 200 x = 100, y = 200. Note vertical flow components model: Plot head contours element locations. First, specify contouring grid: Now plot:  Compute particle traces starting along y = 200 20 intervals per year 5 years add plot:","code":"library(raem)  # aquifer parameters ---- k = 10     # hydraulic conductivity, m/d top = 10   # aquifer top elevation, m base = 0   # aquifer bottom elevation, m n = 0.2    # aquifer porosity, -  hr = 15    # head at reference point, m TR = k * (top - base) # constant transmissivity of background flow, m^2/d  # create elements ---- uf = uniformflow(TR, gradient = 0.001, angle = -45) rf = constant(xc = -1000, yc = 0, hc = hr) w1 = well(xw = 200, yw = 0, Q = 250) w2 = well(xw = -200, yw = -150, Q = 400) m = aem(k = k, top = top, base = base, n = n, uf, rf, w1, w2) heads(m, x = c(-200, 100), y = 200) #> [1] 13.64573 13.33314 discharge(m, c(-200, 100), 200, z = top) # m^2/d #>              Qx         Qy Qz #> [1,] 0.15028815 -0.2923908  0 #> [2,] 0.06041242 -0.3347206  0 xg = seq(-500, 500, length = 100) yg = seq(-250, 250, length = 100) contours(m, xg, yg, 'heads', col = 'dodgerblue', nlevels = 20) plot(m, add = TRUE) paths = tracelines(m,                     x0 = seq(-450, 450, 50),                     y0 = 200,                     z0 = top,                     times = seq(0, 5 * 365, 365 / 20))  plot(paths, add = TRUE, col = 'orange')"},{"path":"https://cneyens.github.io/raem/reference/add_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or remove an element from an existing aem object — add_element","title":"Add or remove an element from an existing aem object — add_element","text":"add_element() adds new element aem object. remove_element() removes element aem object based name type.","code":""},{"path":"https://cneyens.github.io/raem/reference/add_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or remove an element from an existing aem object — add_element","text":"","code":"add_element(aem, element, name = NULL, solve = FALSE, ...)  remove_element(aem, name = NULL, type = NULL, solve = FALSE, ...)"},{"path":"https://cneyens.github.io/raem/reference/add_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or remove an element from an existing aem object — add_element","text":"aem aem object. element analytic element class element. name optional name element character. Duplicate element names aem allowed.. solve logical, model solved adding removing element? Defaults FALSE. ... ignored type class element(s) remove. Either name type specified remove_element().","code":""},{"path":"https://cneyens.github.io/raem/reference/add_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add or remove an element from an existing aem object — add_element","text":"aem model addition element removal element(s). solve = TRUE, model solved using solve.aem(). name new element taken name argument, object name set element_1 1 index new element element list. See examples.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/add_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or remove an element from an existing aem object — add_element","text":"","code":"m <- aem(k = 10, top = 10, base = 0, n = 0.2) mnew <- add_element(m, constant(xc = 0, yc = 1000, hc = 12), name = 'rf')  # if name not supplied, tries to obtain it from object name rf <- constant(xc = 0, yc = 1000, hc = 12) mnew <- add_element(m, rf)  # or else sets it sequentially from number of elements mnew <- add_element(m, constant(xc = 0, yc = 1000, hc = 12))  # add_element() adn remove_element() are pipe-friendly mnew <- aem(k = 10, top = 10, base = 0, n = 0.2) |>     add_element(rf, name = 'rf') |>     add_element(headwell(xw = 0, yw = 100, rw = 0.3, hc = 8),                 name = 'headwell', solve = TRUE)  # removing elements mnew <- remove_element(mnew, name = 'rf') mnew <- remove_element(mnew, type = 'headwell')"},{"path":"https://cneyens.github.io/raem/reference/aem.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an analytic element model — aem","title":"Create an analytic element model — aem","text":"aem() creates analytic element model elements can added solve.aem() solves system equations constructed elements aem model plot.element() plots location analytic element point line geometry. plot.aem() plots locations analytic elements point line geometry aem object calling plot.element() , adds existing plot.","code":""},{"path":"https://cneyens.github.io/raem/reference/aem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an analytic element model — aem","text":"","code":"aem(   k,   top,   base,   n,   ...,   type = c(\"variable\", \"confined\"),   verbose = FALSE,   maxiter = 10 )  # S3 method for class 'aem' solve(a, b, maxiter = 10, verbose = FALSE, ...)  # S3 method for class 'element' plot(   x,   y = NULL,   add = FALSE,   pch = 16,   cex = 0.75,   use.widths = TRUE,   col = \"black\",   xlim,   ylim,   ... )  # S3 method for class 'aem' plot(x, y = NULL, add = FALSE, xlim, ylim, ...)"},{"path":"https://cneyens.github.io/raem/reference/aem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an analytic element model — aem","text":"k numeric, hydraulic conductivity aquifer. top numeric, top elevation aquifer. base numeric, bottom elevation aquifer. n numeric, effective porosity aquifer fraction total unit volume. Used determining flow velocities velocity(). ... aem(), objects class element, single (named) list element objects. Otherwise, ignored. type character specifying type flow aquifer, either variable (default) confined. See details. verbose logical indicating information solving process printed. Defaults FALSE. maxiter integer specifying maximum allowed iterations non-linear solution. Defaults 10. See details. aem object. b ignored x aem object, analytic element class element plot. point line geometry, nothing plotted. y ignored add logical, plot added existing plot? Defaults FALSE. pch numeric point symbol value, defaults 16. reference point, value 4 used. cex numeric symbol size value, defaults 0.75. use.widths logical, line elements non-zero width plotted, plotted polygons including width (TRUE; default) infinitesimally thin lines (FALSE)? col color element. Defaults 'black'. xlim numeric, plot limits along x-axis. Required add = FALSE. ylim numeric, plot limits along y-axis. Required add = FALSE.","code":""},{"path":"https://cneyens.github.io/raem/reference/aem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an analytic element model — aem","text":"aem() returns object class aem list consisting k, top, base, n, list containing elements names objects specified ..., logical solved indicating model solved. solve.aem() returns solved aem object, .e. finding solution system equations constructed contained elements.","code":""},{"path":"https://cneyens.github.io/raem/reference/aem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an analytic element model — aem","text":"default type = 'variable' allows unconfined/confined flow, .e. flow variable saturated thickness. type = 'confined', saturated thickness always constant equal aquifer thickness. results linear model head-specified elements resistance used, whereas type = 'variable' create non-linear model case. solve.aem() called aem object returned aem(), solves system equations. reference point (created constant()) never plotted plotting model hydraulic feature. Area-sinks (created areasink() headareasink()) also never plotted clutter plot. elements can plotted calling plot() directly.","code":""},{"path":"https://cneyens.github.io/raem/reference/aem.html","id":"solving","dir":"Reference","previous_headings":"","what":"Solving","title":"Create an analytic element model — aem","text":"solve.aem() sets system equations, calls solve() solve. head-specified elements supplied, element class constant created constant() (also called reference point), supplied well. Constructing aem object call aem() automatically calls solve.aem(). system equations non-linear, .e. flow system unconfined (variable saturated thickness) elements hydraulic resistance specified, Picard iteration entered. Picard iteration step (outer iteration), previously solved model parameters used set solve linear system equations. model parameters updated next outer iteration step entered, maxiter iterations reached. linear model, maxiter ignored.","code":""},{"path":"https://cneyens.github.io/raem/reference/aem.html","id":"plotting","dir":"Reference","previous_headings":"","what":"Plotting","title":"Create an analytic element model — aem","text":"analytic element point geometry collocation point (e.g. headwell()), point also plotted pch = 1.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/aem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an analytic element model — aem","text":"","code":"k <- 10 top <- 10 base <- 0 n <- 0.2 TR <- k * (top - base)  w <- well(xw = 50, yw = 0, Q = 200) rf <- constant(xc = -500, yc = 0, h = 20) uf <- uniformflow(gradient = 0.002, angle = -45, TR = TR) hdw <- headwell(xw = 0, yw = 100, rw = 0.3, hc = 8) ls <- linesink(x0 = -200, y0 = -150, x1 = 200, y1 = 150, sigma = 1)  # Creating aem ---- m <- aem(k, top, base, n, w, rf, uf, hdw, ls)  # or with elements in named list m <- aem(k, top, base, n,          list('well' = w, 'constant' = rf, 'flow' = uf, 'headwell' = hdw, 'river' = ls),          type = 'confined')  # Solving ---- m <- solve(m)  # solving requires a reference point (constant) element if head-specified elements are supplied try(   m <- aem(k = k, top = top, base = base, n = n, w, uf, hdw) ) #> Error : Please provide an element of class 'constant' when solving for unknown parameters in elements  # Plotting ---- plot(ls) plot(w, add = TRUE)  plot(uf) # empty  plot(m, xlim = c(-500, 500), ylim = c(-250, 250))   xg <- seq(-500, 500, length = 200) yg <- seq(-250, 250, length = 100)  contours(m, x = xg, y = yg, col = 'dodgerblue', nlevels = 20) plot(m, add = TRUE)"},{"path":"https://cneyens.github.io/raem/reference/areasink.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a circular area-sink analytic element with specified recharge — areasink","title":"Create a circular area-sink analytic element with specified recharge — areasink","text":"areasink() creates circular area-sink analytic element constant, uniform specified recharge.","code":""},{"path":"https://cneyens.github.io/raem/reference/areasink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a circular area-sink analytic element with specified recharge — areasink","text":"","code":"areasink(xc, yc, N, R, location = c(\"top\", \"base\"), ...)"},{"path":"https://cneyens.github.io/raem/reference/areasink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a circular area-sink analytic element with specified recharge — areasink","text":"xc numeric, x location center area-sink. yc numeric, y location center area-sink. N numeric, uniform constant leakage value (positive aquifer) length per time. R numeric, radius circular area-sink. location character, either top (default) base specifying vertical position area-sink. ... ignored","code":""},{"path":"https://cneyens.github.io/raem/reference/areasink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a circular area-sink analytic element with specified recharge — areasink","text":"Circular area-sink analytic element object class areasink inherits element.","code":""},{"path":"https://cneyens.github.io/raem/reference/areasink.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a circular area-sink analytic element with specified recharge — areasink","text":"Area-sinks can used simulate areal recharge seepage aquifer top, leakage aquifer base. location argument used calculating vertical flow component.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/areasink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a circular area-sink analytic element with specified recharge — areasink","text":"","code":"as <- areasink(xc = -500, yc = 0, N = 0.001, R = 500)  # flux assuming a constant head difference over a confining unit dh <- 3 res <- 10 / 0.0001 as <- areasink(xc = -500, yc = 0, N = -dh/res, R = 500, location = 'base')"},{"path":"https://cneyens.github.io/raem/reference/capzone.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the capture zone of a well element — capzone","title":"Calculate the capture zone of a well element — capzone","text":"capzone() determines capture zone well element flow field performing backward particle tracking requested time reached.","code":""},{"path":"https://cneyens.github.io/raem/reference/capzone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the capture zone of a well element — capzone","text":"","code":"capzone(aem, well, time, npar = 15, dt = time/10, zstart = aem$base, ...)"},{"path":"https://cneyens.github.io/raem/reference/capzone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the capture zone of a well element — capzone","text":"aem aem object. well analytic element class well. time numeric, time capture zone. npar integer, number particles use backward tracking. Defaults 15. dt numeric, time step length used particle tracking. Defaults time / 10. zstart numeric value starting elevation particles. Defaults base aquifer. ... additional arguments passed tracelines().","code":""},{"path":"https://cneyens.github.io/raem/reference/capzone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the capture zone of a well element — capzone","text":"capzone() returns object class tracelines.","code":""},{"path":"https://cneyens.github.io/raem/reference/capzone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the capture zone of a well element — capzone","text":"capzone() thin wrapper around tracelines(). Backward particle tracking performed using tracelines() setting forward = FALSE. Initial particle locations computed equally spacing npar locations well radius zstart elevation. obtain sharper delineation capture zone envelope, try using particles decreasing dt. Note different zstart values effect models vertical flow components.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/capzone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the capture zone of a well element — capzone","text":"","code":"# A model with vertical flow components k <- 10 top <- 10; base <- 0 n <- 0.3  uf <- uniformflow(TR = 100, gradient = 0.001, angle = -10) rf <- constant(TR, xc = -1000, yc = 0, hc = 20) w1 <- well(200, 50, Q = 250) w2 <- well(-200, -100, Q = 450) as <- areasink(0, 0, N = 0.001, R = 1500)  m <- aem(k, top, base, n = n, uf, rf, w1, w2, as)  # 5-year capture zone at two different starting levels # here, the number of particles are set to small values to speed up the examples # increase the number of particles to obtain a sharper delineation of the envelope cp5a <- capzone(m, w1, time = 5 * 365, zstart = base, npar = 6, dt = 365 / 4) cp5b <- capzone(m, w1, time = 5 * 365, zstart = 8, npar = 6, dt = 365 / 4)  xg <- seq(-800, 800, length = 100) yg <- seq(-500, 500, length = 100) contours(m, xg, yg, col = 'dodgerblue', nlevels = 20) plot(cp5a, add = TRUE) plot(cp5b, add = TRUE, col = 'forestgreen') # smaller zone  # plot the convex hull of the endpoints as a polygon endp <- endpoints(cp5b) hull <- chull(endp[, c('x', 'y')]) polygon(endp[hull, c('x', 'y')], col = adjustcolor('forestgreen', alpha.f = 0.7))"},{"path":"https://cneyens.github.io/raem/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a constant-head analytic element — constant","title":"Create a constant-head analytic element — constant","text":"constant() creates analytic element containing constant head, often referred reference point.","code":""},{"path":"https://cneyens.github.io/raem/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a constant-head analytic element — constant","text":"","code":"constant(xc, yc, hc, ...)"},{"path":"https://cneyens.github.io/raem/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a constant-head analytic element — constant","text":"xc numeric, x location reference point. yc numeric, y location reference point. hc numeric, hydraulic head reference point. ... ignored","code":""},{"path":"https://cneyens.github.io/raem/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a constant-head analytic element — constant","text":"Constant-head analytic element point object class constant inherits element.","code":""},{"path":"https://cneyens.github.io/raem/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a constant-head analytic element — constant","text":"","code":"rf <- constant(xc = -100, yc = 0, hc = 10)"},{"path":"https://cneyens.github.io/raem/reference/contours.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot contours of a state-variable of the analytic element model — contours","title":"Plot contours of a state-variable of the analytic element model — contours","text":"contours() creates contour plot state-variable computed analytic element model aem, adds contour lines existing plot.","code":""},{"path":"https://cneyens.github.io/raem/reference/contours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot contours of a state-variable of the analytic element model — contours","text":"","code":"contours(   aem,   x,   y,   variable = c(\"heads\", \"streamfunction\", \"potential\"),   asp = 1,   ... )"},{"path":"https://cneyens.github.io/raem/reference/contours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot contours of a state-variable of the analytic element model — contours","text":"aem aem object. x numeric, vector marginal x coordinates gridded values computed. must ascending order. y numeric, vector marginal y coordinates gridded values computed. must ascending order. variable character indicating state-variable plot. Possible values heads (default), streamfunction potential. asp y/x aspect ratio, see plot.window(). Defaults 1 (equal unit lengths). ... additional arguments passed contour().","code":""},{"path":"https://cneyens.github.io/raem/reference/contours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot contours of a state-variable of the analytic element model — contours","text":"contour plot selected variable.","code":""},{"path":"https://cneyens.github.io/raem/reference/contours.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot contours of a state-variable of the analytic element model — contours","text":"contours() wrapper around contour(). obtains values variable grid points defined marginal vectors x y constructs matrix supplied contour() reversing rows transposing matrix (see also documentation image()).","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/contours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot contours of a state-variable of the analytic element model — contours","text":"","code":"w <- well(xw = 50, yw = 0, Q = 200) wi <- well(xw = -200, yw = 0, Q = -100) uf <- uniformflow(gradient = 0.002, angle = -45, TR = 100) rf <- constant(-1000, 0, hc = 10) ml <- aem(k = 10, top = 10, base = 0, n = 0.2, w, wi, uf, rf)  # grid points xg <- seq(-350, 200, length = 100) yg <- seq(-125, 125, length = 100)  contours(ml, xg, yg, nlevels = 20, col = 'dodgerblue', labcex = 1) contours(ml, xg, yg, 'streamfunction', nlevels = 20, col = 'orange',          drawlabels = FALSE, add = TRUE)   # Not to be confused by contour() try( contour(ml, xg, yg, nlevels = 20, col = 'dodgerblue', labcex = 1) ) #> Error in contour.default(ml, xg, yg, nlevels = 20, col = \"dodgerblue\",  :  #>   no proper 'z' matrix specified  # For image() or filled.contour() library(graphics) h <- heads(ml, xg, yg, as.grid = TRUE) h_im <- t(h[dim(h)[1]:1,]) image(xg, yg, h_im, asp = 1) contour(xg, yg, h_im, asp = 1, add = TRUE) # contours() is a wrapper for this  filled.contour(xg, yg, h_im, asp = 1)"},{"path":"https://cneyens.github.io/raem/reference/dirflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute flow in the direction of a given angle — dirflow","title":"Compute flow in the direction of a given angle — dirflow","text":"dirflow() computes flow variable given points direction supplied angle.","code":""},{"path":"https://cneyens.github.io/raem/reference/dirflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute flow in the direction of a given angle — dirflow","text":"","code":"dirflow(   aem,   x,   y,   angle,   flow = c(\"discharge\", \"darcy\", \"velocity\"),   as.grid = FALSE,   ... )"},{"path":"https://cneyens.github.io/raem/reference/dirflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute flow in the direction of a given angle — dirflow","text":"aem aem object. x numeric x coordinates evaluate flow . y numeric y coordinates evaluate flow . angle numeric, angle direction evaluate flow, degrees counterclockwise x-axis. flow character specifying flow variable use. Possible values discharge (default), darcy velocity. See flow(). .grid logical, matrix returned? Defaults FALSE. See details. ... additional arguments passed discharge(), darcy() velocity().","code":""},{"path":"https://cneyens.github.io/raem/reference/dirflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute flow in the direction of a given angle — dirflow","text":"vector length(x) (equal length(y)) flow values x y direction angle. .grid = TRUE, matrix dimensions c(length(y), length(x)) described marginal vectors x y containing directed flow values grid points.","code":""},{"path":"https://cneyens.github.io/raem/reference/dirflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute flow in the direction of a given angle — dirflow","text":"x y components flow used calculate directed value using angle. z coordinate discharge(), darcy() velocity() set aquifer base. Dupuit-Forchheimer, x y components flow vector change along vertical axis.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/dirflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute flow in the direction of a given angle — dirflow","text":"","code":"rf <- constant(-1000, 0, hc = 10) uf <- uniformflow(TR = 100, gradient = 0.001, angle = -45) w <- well(10, -50, Q = 200)  m <- aem(k = 10, top = 10, base = 0, n = 0.2, rf, uf) dirflow(m, x = c(0, 100), y = 50, angle = -45) #> [1] 0.1 0.1  m <- aem(k = 10, top = 10, base = 0, n = 0.2, rf, uf, w, type = 'confined') dirflow(m, x = c(0, 50, 100), y = c(0, 50), angle = -90, flow = 'velocity', as.grid = TRUE) #>           [,1]      [,2]      [,3] #> [1,] 0.1929345 0.1725579 0.1232862 #> [2,] 0.3414225 0.2294467 0.1104284"},{"path":"https://cneyens.github.io/raem/reference/element_discharge.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the computed discharge from an element — element_discharge","title":"Get the computed discharge from an element — element_discharge","text":"element_discharge() obtains computed discharge aquifer individual analytic element elements given type.","code":""},{"path":"https://cneyens.github.io/raem/reference/element_discharge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the computed discharge from an element — element_discharge","text":"","code":"element_discharge(aem, name = NULL, type = NULL, ...)"},{"path":"https://cneyens.github.io/raem/reference/element_discharge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the computed discharge from an element — element_discharge","text":"aem aem object. name character vector name element(s) available aem$elements. type character type (class) element obtain summed discharge . See details. ... ignored","code":""},{"path":"https://cneyens.github.io/raem/reference/element_discharge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the computed discharge from an element — element_discharge","text":"numeric named vector length length(name) discharge (negative) (positive) aquifer. type specified, single named numeric value total discharge (negative) (positive) aquifer sum individual elements class type.","code":""},{"path":"https://cneyens.github.io/raem/reference/element_discharge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the computed discharge from an element — element_discharge","text":"Either name type specified. type specified, one type allowed. Possible values 'headwell', 'well', 'linesink', 'headlinesink', 'areasink' 'headareasink'. elements add remove water aquifer return non-zero discharge value.","code":""},{"path":"https://cneyens.github.io/raem/reference/element_discharge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the computed discharge from an element — element_discharge","text":"","code":"k <- 10 top <- 10 base <- 0 n <- 0.2 TR <- k * (top - base)  rf <- constant(xc = -500, yc = 0, h = 20) uf <- uniformflow(gradient = 0.002, angle = -45, TR = TR) w1 <- well(xw = 50, yw = 0, Q = 200) w2 <- well(xw = 0, yw = 100, Q = 400) hw <- headwell(xw = -100, yw = 0, hc = 7.5) hls <- headlinesink(x0 = -200, y0 = -150, x1 = 200, y1 = 150, hc = 8) as <- areasink(xc = 0, yc = 0, N = 0.0005, R = 500) m <- aem(k, top, base, n, rf, uf, w1, w2, hw, hls, as)  element_discharge(m, name = c('hls', 'as')) #>       hls        as  #> 3301.0721 -392.6991  element_discharge(m, type = 'well') #> well  #>  600   # zero discharge for uniform flow element as it does not add or remove water element_discharge(m, name = 'uf') #> uf  #>  0"},{"path":"https://cneyens.github.io/raem/reference/flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate flow variables — flow","title":"Calculate flow variables — flow","text":"discharge() computes x, y z components discharge vector aem object given x, y z coordinates. darcy() computes x, y z components Darcy flux vector (also called specific discharge vector) aem object given x, y z coordinates. velocity() computes x, y z components average linear groundwater flow velocity vector aem object given x, y z coordinates. domega() computes complex discharge aem element object given x y coordinates.","code":""},{"path":"https://cneyens.github.io/raem/reference/flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate flow variables — flow","text":"","code":"discharge(...)  darcy(...)  velocity(...)  domega(...)  # S3 method for class 'aem' discharge(   aem,   x,   y,   z,   as.grid = FALSE,   magnitude = FALSE,   verbose = TRUE,   ... )  # S3 method for class 'aem' darcy(aem, x, y, z, as.grid = FALSE, magnitude = FALSE, ...)  # S3 method for class 'aem' velocity(aem, x, y, z, as.grid = FALSE, magnitude = FALSE, R = 1, ...)  # S3 method for class 'aem' domega(aem, x, y, as.grid = FALSE, ...)  # S3 method for class 'element' domega(element, x, y, ...)"},{"path":"https://cneyens.github.io/raem/reference/flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate flow variables — flow","text":"... ignored arguments passed velocity() darcy() discharge(). aem aem object. x numeric x coordinates evaluate flow . y numeric y coordinates evaluate flow . z numeric z coordinates evaluate .grid logical, matrix returned? Defaults FALSE. See details. magnitude logical, magnitude flow vector returned well? Default FALSE. See details. verbose logical, TRUE (default), warnings regards setting Qz NA printed. See details. R numeric, retardation coefficient used velocity(). Defaults 1 (retardation). element analytic element class element.","code":""},{"path":"https://cneyens.github.io/raem/reference/flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate flow variables — flow","text":"discharge(), matrix number rows equal number points evaluate discharge vector , columns Qx, Qy Qz corresponding x, y z components discharge vector coordinates x, y z. .grid = TRUE, array dimensions c(length(y), length(x), length(z), 3) described marginal vectors x, y z (columns, rows third dimension) containing x, y z components discharge vector (Qx, Qy Qz) fourth dimension. x component discharge() real value domega(), y component negative imaginary component z component calculated based area-sink strengths /curvature phreatic surface. magnitude = TRUE, last dimension returned array expanded include magnitude discharge/Darcy/velocity vector, calculated sqrt(Qx^2 + Qy^2 + Qz^2) (sqrt(qx^2 + qy^2 + qz^2) sqrt(vx^2 + vy^2 + vz^2), respectively). darcy(), discharge() x, y z components Darcy flux vector (qx, qy qz). values computed dividing values discharge() saturated thickness x, y z. velocity(), discharge() x, y z components average linear groundwater flow velocity vector (vx, vy vz). values computed dividing darcy() values effective porosity (aem$n) retardation coefficient R. domega(), vector length(x) (equal length(y)) complex discharge values x y, .grid = TRUE, matrix dimensions c(length(y), length(x)) described marginal vectors x y containing complex discharge values grid points. domega() derivative omega() x y directions.","code":""},{"path":"https://cneyens.github.io/raem/reference/flow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate flow variables — flow","text":"discharge(), darcy() velocity() method object class element aem object required obtain aquifer base top. z coordinate saturated aquifer level (.e. water-table unconfined conditions aquifer top confined conditions), aquifer base, Qz values set NA warning (verbose = TRUE). Qx Qy values set NA, convenience specifying z coordinate lateral flow interest.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate flow variables — flow","text":"","code":"w <- well(xw = 55, yw = 0, Q = 200) uf <- uniformflow(gradient = 0.002, angle = -45, TR = 100) as <- areasink(xc = 0, yc = 0, N = 0.001, R = 500) rf <- constant(xc = -1000, yc = 1000, hc = 10) ml <- aem(k = 10, top = 10, base = -15, n = 0.2, w, uf, as, rf)  xg <- seq(-100, 100, length = 5) yg <- seq(-75, 75, length = 3)  # Discharge vector discharge(ml, c(150, 0), c(80, -80), z = -10) #>              Qx         Qy           Qz #> [1,] 0.02037961 -0.2665091 -0.005060767 #> [2,] 0.32717248  0.0887621 -0.005097869 discharge(ml, c(150, 0), c(80, -80), z = c(2, 5), magnitude = TRUE) #>              Qx         Qy          Qz         Q #> [1,] 0.02037961 -0.2665091 -0.01720661 0.2678405 #> [2,] 0.32717248  0.0887621 -0.02039148 0.3396121 discharge(ml, xg, yg, z = 2, as.grid = TRUE) #> , , 1, Qx #>  #>           [,1]      [,2]      [,3]      [,4]         [,5] #> [1,] 0.2578228 0.3171573 0.3438149 0.1945904  0.004180247 #> [2,] 0.2967826 0.4195736 0.7201666 6.5326191 -0.515933946 #> [3,] 0.2578228 0.3171573 0.3438149 0.1945904  0.004180247 #>  #> , , 1, Qy #>  #>             [,1]        [,2]        [,3]       [,4]       [,5] #> [1,] -0.18443819 -0.24730419 -0.37991259 -0.5264566 -0.4159899 #> [2,] -0.14142136 -0.14142136 -0.14142136 -0.1414214 -0.1414214 #> [3,] -0.09840452 -0.03553852  0.09706987  0.2436139  0.1331472 #>  #> , , 1, Qz #>  #>             [,1]        [,2]        [,3]        [,4]        [,5] #> [1,] -0.01728591 -0.01746242 -0.01775486 -0.01791021 -0.01750075 #> [2,] -0.01730880 -0.01756345 -0.01856240 -0.14449874 -0.01783670 #> [3,] -0.01721822 -0.01729328 -0.01736962 -0.01728292 -0.01705172 #>  discharge(ml, c(150, 0), c(80, -80), z = ml$top + c(-5, 0.5)) # NA for z > water-table #> Warning: Setting Qz values to NA for z above saturated aquifer level or below aquifer base #>              Qx         Qy          Qz #> [1,] 0.02037961 -0.2665091 -0.02024307 #> [2,] 0.32717248  0.0887621          NA  # Darcy flux darcy(ml, c(150, 0), c(80, -80), c(0, 5), magnitude = TRUE) #>               qx           qy            qz          q #> [1,] 0.000840556 -0.010992156 -0.0006261932 0.01104202 #> [2,] 0.013502552  0.003663251 -0.0008415652 0.01401594  # Velocity velocity(ml, c(150, 0), c(80, -80), c(0, 5), magnitude = TRUE, R = 5) #>               vx           vy            vz          v #> [1,] 0.000840556 -0.010992156 -0.0006261932 0.01104202 #> [2,] 0.013502552  0.003663251 -0.0008415652 0.01401594  # Complex discharge domega(ml, c(150, 0), c(80, -80)) #> [1] 0.02037961+0.2665091i 0.32717248-0.0887621i  # Complex discharge for elements domega(w, c(150, 0), c(80, -80)) #> [1] -0.1960417+0.1650878i  0.1857511-0.2701835i"},{"path":"https://cneyens.github.io/raem/reference/flow_through_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the total flow passing through a line — flow_through_line","title":"Calculate the total flow passing through a line — flow_through_line","text":"flow_through_line() computes integrated flow passing straight line right angle.","code":""},{"path":"https://cneyens.github.io/raem/reference/flow_through_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the total flow passing through a line — flow_through_line","text":"","code":"flow_through_line(   aem,   x0,   y0,   x1,   y1,   flow = c(\"discharge\", \"darcy\"),   split = FALSE,   ... )"},{"path":"https://cneyens.github.io/raem/reference/flow_through_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the total flow passing through a line — flow_through_line","text":"aem aem object x0 numeric, starting x location line. y0 numeric, starting y location line. x1 numeric, ending x location line. y1 numeric, ending y location line. flow character specifying flow variable use. Possible values discharge (default) darcy. See flow(). split logical, flow split positive negative flows (TRUE) summed (FALSE; default)? See details. ... ignored","code":""},{"path":"https://cneyens.github.io/raem/reference/flow_through_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the total flow passing through a line — flow_through_line","text":"split = FALSE, single value total flow variable flow passing line right angle. split = TRUE named vector total positive total negative value flow passing line.","code":""},{"path":"https://cneyens.github.io/raem/reference/flow_through_line.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the total flow passing through a line — flow_through_line","text":"flow computed normal line integrated along line length using stats::integrate(). flow value positive going left looking direction line (.e. left going x0-y0 x1-y1). split = FALSE (default), single value returned sum positive negative flows perpendicular line. split = TRUE, positive negative component total flow line returned. line corresponds line element, integration might fail. Try perturbate line vertices slightly case.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/flow_through_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the total flow passing through a line — flow_through_line","text":"","code":"rf <- constant(-1000, 0, hc = 10) uf <- uniformflow(TR = 100, gradient = 0.001, angle = -45) m <- aem(k = 10, top = 10, base = 0, n = 0.2, rf, uf)  xg <- seq(-500, 500, l=100); yg <- seq(-300, 300, l=100) contours(m, xg, yg, col='dodgerblue', nlevels=20)  x0 <- -200 y0 <- -50 x1 <- 300 y1 <- 100 lines(matrix(c(x0, y0, x1, y1), ncol = 2, byrow = TRUE))   flow_through_line(m, x0, y0, x1, y1) #> [1] -45.96194 flow_through_line(m, x1, y1, x0, y0) # reverse direction of line #> [1] 45.96194  w <- well(125, 200, 150) m <- aem(k = 10, top = 10, base = 0, n = 0.2, rf, uf, w) contours(m, xg, yg, col='dodgerblue', nlevels=20) lines(matrix(c(x0, y0, x1, y1), ncol = 2, byrow = TRUE))   flow_through_line(m, x0, y0, x1, y1, flow = 'darcy') #> [1] 0.1633028 flow_through_line(m, x0, y0, x1, y1, flow = 'darcy', split = TRUE) #>  positive  negative  #>  1.369686 -1.206383"},{"path":"https://cneyens.github.io/raem/reference/head_to_potential.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert hydraulic head to potential and vice versa — head_to_potential","title":"Convert hydraulic head to potential and vice versa — head_to_potential","text":"head_to_potential() calculates discharge potential hydraulic head. potential_to_head() calculates hydraulic head discharge potential.","code":""},{"path":"https://cneyens.github.io/raem/reference/head_to_potential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert hydraulic head to potential and vice versa — head_to_potential","text":"","code":"head_to_potential(aem, h, ...)  potential_to_head(aem, phi, na.below = TRUE, ...)"},{"path":"https://cneyens.github.io/raem/reference/head_to_potential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert hydraulic head to potential and vice versa — head_to_potential","text":"aem aem object. h numeric hydraulic head values vector matrix. ... ignored phi numeric discharge potential values vector matrix. na.logical indicating calculated head values aquifer base set NA. Defaults TRUE. See details.","code":""},{"path":"https://cneyens.github.io/raem/reference/head_to_potential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert hydraulic head to potential and vice versa — head_to_potential","text":"head_to_potential() returns discharge potentials calculated h, structure h. potential_to_head() returns hydraulic heads calculated phi, structure phi. conversion potential head vice versa different confined (constant saturated thickness) unconfined (variable saturated thickness) aquifers set type argument aem(). na.= FALSE, negative potentials can converted hydraulic heads flow unconfined (aem$type = 'variable'). resulting heads aquifer base. may useful use cases, e.g. preliminary model construction internal functions. cases however, values set NA (default behavior) since analytic elements continue extract inject water even though saturated thickness aquifer negative, realistic. cases, setting aem$type = 'confined' might prove useful. Also note heads aquifer base correctly re-converted potentials using head_to_potential(). , caution taken setting na.= FALSE.","code":""},{"path":"https://cneyens.github.io/raem/reference/head_to_potential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert hydraulic head to potential and vice versa — head_to_potential","text":"","code":"k <- 10 top <- 10; base <- 0 uf <- uniformflow(TR = 100, gradient = 0.001, angle = -45) rf <- constant(TR, xc = -1000, yc = 0, hc = 10) w1 <- well(200, 50, Q = 250) m <- aem(k, top, base, n = 0.2, uf, rf, w1, type = 'variable') # variable saturated thickness mc <- aem(k, top, base, n = 0.2, uf, rf, w1, type = 'confined') # constant saturated thickness xg <- seq(-500, 500, length = 100) yg <- seq(-250, 250, length = 100)  h <- heads(m, x = xg, y = yg, as.grid = TRUE) hc <- heads(mc, x = xg, y = yg, as.grid = TRUE) pot <- head_to_potential(m, h) potc <- head_to_potential(mc, hc)  phi <- potential(m, x = xg, y = yg, as.grid = TRUE) phic <- potential(mc, x = xg, y = yg, as.grid = TRUE) hds <- potential_to_head(m, phi) hdsc <- potential_to_head(mc, phic)  # Converting negative potentials results in NA's with warning try( potential_to_head(m, -300) ) #> Warning: NaNs produced #> [1] NaN  # unless na.below = FALSE potential_to_head(m, -300, na.below = FALSE) #> [1] -7.745967"},{"path":"https://cneyens.github.io/raem/reference/headareasink.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a head-specified area-sink analytic element — headareasink","title":"Create a head-specified area-sink analytic element — headareasink","text":"headareasink() creates circular area-sink analytic element constant specified head. constant leakage flux aquifer area-sink computed solving corresponding aem model.","code":""},{"path":"https://cneyens.github.io/raem/reference/headareasink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a head-specified area-sink analytic element — headareasink","text":"","code":"headareasink(xc, yc, hc, R, resistance = 0, location = c(\"top\", \"base\"), ...)"},{"path":"https://cneyens.github.io/raem/reference/headareasink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a head-specified area-sink analytic element — headareasink","text":"xc numeric, x location center area-sink. yc numeric, y location center area-sink. hc numeric, specified hydraulic head center area-sink. R numeric, radius circular area-sink. resistance numeric, hydraulic resistance area-sink connection aquifer. Defaults 0 (resistance). location character, either top (default) base specifying vertical position area-sink. ... ignored","code":""},{"path":"https://cneyens.github.io/raem/reference/headareasink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a head-specified area-sink analytic element — headareasink","text":"Circular head-specified area-sink analytic element object class headareasink inherits areasink.","code":""},{"path":"https://cneyens.github.io/raem/reference/headareasink.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a head-specified area-sink analytic element — headareasink","text":"constant leakage flux area-sink computed solving aem model given specified head hc area-sink. head located -called collocation point, placed center area-sink. positive flux aquifer. Note head-dependent flux constant domain computed collocation point. flux therefore determined difference aquifer head specified head location , vary across domain varying aquifer head. resistance can increased area-sink poor connection aquifer, e.g. confining unit low hydraulic conductivity aquifer area-sink. aquifer unconfined (.e. variable saturated thickness), system equations become non-linear respect hydraulic head iteration required solve model.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/headareasink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a head-specified area-sink analytic element — headareasink","text":"","code":"has <- headareasink(xc = -500, yc = 0, hc = 3, R = 500, res = 1000) has <- headareasink(xc = -500, yc = 0, hc = 3, R = 500, location = 'base')"},{"path":"https://cneyens.github.io/raem/reference/headlinesink.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a head-specified line-sink analytic element — headlinesink","title":"Create a head-specified line-sink analytic element — headlinesink","text":"headlinesink() creates line-sink analytic element constant specified head. discharge line-sink per unit length computed solving corresponding aem model.","code":""},{"path":"https://cneyens.github.io/raem/reference/headlinesink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a head-specified line-sink analytic element — headlinesink","text":"","code":"headlinesink(x0, y0, x1, y1, hc, resistance = 0, width = 0, ...)"},{"path":"https://cneyens.github.io/raem/reference/headlinesink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a head-specified line-sink analytic element — headlinesink","text":"x0 numeric, starting x location line-sink. y0 numeric, starting y location line-sink. x1 numeric, ending x location line-sink. y1 numeric, ending y location line-sink. hc numeric, specified hydraulic head line-sink. resistance numeric, hydraulic resistance line-sink connection aquifer. Defaults 0 (resistance). width numeric, width line-sink. Used resistance calculate line-sink strength, tracelines() determine particle reached line. Defaults zero (infinitesimally narrow line). ... ignored","code":""},{"path":"https://cneyens.github.io/raem/reference/headlinesink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a head-specified line-sink analytic element — headlinesink","text":"Head-specified line-sink analytic element object class headlinesink inherits linesink.","code":""},{"path":"https://cneyens.github.io/raem/reference/headlinesink.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a head-specified line-sink analytic element — headlinesink","text":"strength line-sink (discharge per unit length line-sink) computed solving aem model given specified head hc line-sink. head located -called collocation point, placed center line-sink. resistance can increased line-sink poor connection aquifer. effect larger smaller wetted perimeter can mimicked adjusting resistance /width accordingly. width = 0 (default) removed conductance calculation. aquifer unconfined (.e. variable saturated thickness), system equations becomes non-linear respect hydraulic head iteration required solve model.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/headlinesink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a head-specified line-sink analytic element — headlinesink","text":"","code":"hls <- headlinesink(-75, 50, 100, 50, hc = 10) hls <- headlinesink(-75, 50, 100, 50, hc = 10, resistance = 10, width = 4)"},{"path":"https://cneyens.github.io/raem/reference/headwell.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a analytic element of a well with a constant head — headwell","title":"Create a analytic element of a well with a constant head — headwell","text":"headwell() creates analytic element well constant, specified head. discharge well computed solving corresponding aem model. head can specified well location.","code":""},{"path":"https://cneyens.github.io/raem/reference/headwell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a analytic element of a well with a constant head — headwell","text":"","code":"headwell(xw, yw, hc, rw = 0.3, xc = xw, yc = yw, rc = rw, resistance = 0, ...)"},{"path":"https://cneyens.github.io/raem/reference/headwell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a analytic element of a well with a constant head — headwell","text":"xw numeric, x location well. yw numeric, y location well. hc numeric, specified hydraulic head collocation point. rw numeric, radius well. Defaults 0.3 (meter). xc numeric, x location collocation point. See details. Defaults xw. yc numeric, y location collocation point. See details. Defaults yw. rc numeric, radius collocation point. See details. Defaults rw. resistance numeric, hydraulic resistance collocation point. Defaults 0 (resistance). ... ignored","code":""},{"path":"https://cneyens.github.io/raem/reference/headwell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a analytic element of a well with a constant head — headwell","text":"Analytic element well constant head object class headwell inherits well.","code":""},{"path":"https://cneyens.github.io/raem/reference/headwell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a analytic element of a well with a constant head — headwell","text":"discharge well location xw - yw computed solving aem model given specified head hc. head specified xc + rc - yc, called collocation point. can used compute discharge well specifying head location. default, location well collocation point . hydraulic resistance well screen collocation point can increased well poor connection aquifer. aquifer unconfined (.e. variable saturated thickness), system equations becomes non-linear respect hydraulic head iteration required solve model.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/headwell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a analytic element of a well with a constant head — headwell","text":"","code":"hw <- headwell(xw = 400, yw = 300, hc = 20, rw = 0.3) hw <- headwell(xw = 400, yw = 300, hc = 20, rw = 0.3, resistance = 10) hw <- headwell(xw = 400, yw = 300, hc = 20, rw = 0.3, xc = 500, yc = 500, rc = 0)"},{"path":"https://cneyens.github.io/raem/reference/linesink.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a strength-specified line-sink analytic element — linesink","title":"Create a strength-specified line-sink analytic element — linesink","text":"linesink() creates line-sink analytic element constant specified strength.","code":""},{"path":"https://cneyens.github.io/raem/reference/linesink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a strength-specified line-sink analytic element — linesink","text":"","code":"linesink(x0, y0, x1, y1, sigma, width = 0, ...)"},{"path":"https://cneyens.github.io/raem/reference/linesink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a strength-specified line-sink analytic element — linesink","text":"x0 numeric, starting x location line-sink. y0 numeric, starting y location line-sink. x1 numeric, ending x location line-sink. y1 numeric, ending y location line-sink. sigma numeric, specific strength line-sink, .e. discharge per unit length line-sink. Positive aquifer. width numeric, width line-sink. used tracelines() determine particle reached line. Defaults zero (infinitesimally narrow line). ... ignored","code":""},{"path":"https://cneyens.github.io/raem/reference/linesink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a strength-specified line-sink analytic element — linesink","text":"Strength-specified line-sink analytic element object class linesink inherits element.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/linesink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a strength-specified line-sink analytic element — linesink","text":"","code":"ls <- linesink(-75, 50, 100, 50, sigma = 1, width = 3)"},{"path":"https://cneyens.github.io/raem/reference/satthick.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the saturated thickness — satthick","title":"Compute the saturated thickness — satthick","text":"satthick() computes saturated thickness aquifer aem object given x y coordinates.","code":""},{"path":"https://cneyens.github.io/raem/reference/satthick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the saturated thickness — satthick","text":"","code":"satthick(aem, x, y, as.grid = FALSE, ...)"},{"path":"https://cneyens.github.io/raem/reference/satthick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the saturated thickness — satthick","text":"aem aem object. x numeric x coordinates evaluate . y numeric y coordinates evaluate . .grid logical, matrix returned? Defaults FALSE. See details. ... additional arguments passed heads() aem$type = 'variable'.","code":""},{"path":"https://cneyens.github.io/raem/reference/satthick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the saturated thickness — satthick","text":"vector length(x) (equal length(y)) saturated thicknesses x y. .grid = TRUE, matrix dimensions c(length(y), length(x)) described marginal vectors x y containing saturated thicknesses grid points.","code":""},{"path":"https://cneyens.github.io/raem/reference/satthick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the saturated thickness — satthick","text":"aquifer confined x y, saturated thickness equals aquifer thickness. flow variable saturated thickness (aem$type = 'variable'), aquifer unconfined x y, saturated thickness calculated hydraulic head x y minus aquifer base.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/satthick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the saturated thickness — satthick","text":"","code":"uf <- uniformflow(100, 0.001, 0) rf <- constant(-1000, 0, 11) m <- aem(k = 10, top = 10, base = 0, n = 0.2, uf, rf, type = 'confined')  satthick(m, x = c(-200, 0, 200), y = 0) # confined #> [1] 10 10 10 s <- satthick(m, x = seq(-500, 500, length = 100),               y = seq(-250, 250, length = 100), as.grid = TRUE) str(s) #>  num [1:100, 1:100] 10 10 10 10 10 10 10 10 10 10 ...  mv <- aem(k = 10, top = 10, base = 0, n = 0.2, uf, rf, type = 'variable') satthick(mv, x = c(-200, 0, 200), y = 0) # variable #> [1] 10.000000 10.000000  9.797959"},{"path":"https://cneyens.github.io/raem/reference/state-variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate state-variables — state-variables","title":"Calculate state-variables — state-variables","text":"heads() computes hydraulic head given x y coordinates aem object. omega() computes complex potential aem element object given x y coordinates. potential() computes discharge potential aem element object given x y coordinates. streamfunction() computes stream function aem element object given x y coordinates.","code":""},{"path":"https://cneyens.github.io/raem/reference/state-variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate state-variables — state-variables","text":"","code":"heads(aem, x, y, as.grid = FALSE, na.below = TRUE, ...)  omega(...)  potential(...)  streamfunction(...)  # S3 method for class 'aem' omega(aem, x, y, as.grid = FALSE, ...)  # S3 method for class 'aem' potential(aem, x, y, as.grid = FALSE, ...)  # S3 method for class 'aem' streamfunction(aem, x, y, as.grid = FALSE, ...)  # S3 method for class 'element' omega(element, x, y, ...)  # S3 method for class 'element' potential(element, x, y, ...)  # S3 method for class 'element' streamfunction(element, x, y, ...)"},{"path":"https://cneyens.github.io/raem/reference/state-variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate state-variables — state-variables","text":"aem aem object. x numeric x coordinates evaluate variable . y numeric y coordinates evaluate variable . .grid logical, matrix returned? Defaults FALSE. See details. na.logical indicating calculated head values aquifer base set NA. Defaults TRUE. See potential_to_head(). ... ignored element analytic element class element.","code":""},{"path":"https://cneyens.github.io/raem/reference/state-variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate state-variables — state-variables","text":"heads(), vector length(x) (equal length(y)) hydraulic head values x y. .grid = TRUE, matrix dimensions c(length(y), length(x)) described marginal vectors x y containing hydraulic head values grid points. heads computed potential() aquifer parameters using potential_to_head(). omega(), heads() containing complex potential values evaluated x y. potential(), heads() containing discharge potential values evaluated x y, real components omega(). streamfunction(), heads() containing stream function values evaluated x y, imaginary components omega().","code":""},{"path":"https://cneyens.github.io/raem/reference/state-variables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate state-variables — state-variables","text":"heads() confused utils::head(), returns first part object.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/state-variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate state-variables — state-variables","text":"","code":"w <- well(xw = 55, yw = 0, Q = 200) uf <- uniformflow(gradient = 0.002, angle = -45, TR = 100) rf <- constant(xc = -1000, yc = 1000, hc = 10) ml <- aem(k = 10, top = 10, base = -15, n = 0.2, w, uf, rf)  xg <- seq(-100, 100, length = 5) yg <- seq(-75, 75, length = 3)  # Hydraulic heads heads(ml, c(50, 0), c(25, -25)) #> [1] 8.280544 8.398209 heads(ml, xg, yg, as.grid = TRUE) #>          [,1]     [,2]     [,3]     [,4]     [,5] #> [1,] 8.660110 8.591307 8.517038 8.458073 8.448488 #> [2,] 8.601056 8.518423 8.400544 8.041392 8.312647 #> [3,] 8.570281 8.501215 8.426661 8.367468 8.357846  # do not confuse heads() with utils::head, which will give an error try( head(ml, c(50, 0), c(25, -25)) ) #> Error in head.default(ml, c(50, 0), c(25, -25)) :  #>   invalid 'n' - must have length one when dim(x) is NULL, got 2  # Complex potential omega(ml, c(50, 0), c(25, -25)) #> [1] 2709.919+45.67669i 2737.381-82.88449i  # Discharge potential potential(ml, c(50, 0), c(25, -25)) #> [1] 2709.919 2737.381  # Stream function streamfunction(ml, c(50, 0), c(25, -25)) #> [1]  45.67669 -82.88449  # For elements omega(w, c(50, 0), c(-25, 25)) #> [1] 103.0842-56.28330i 130.5466+86.42003i  potential(w, c(50, 0), c(-25, 25)) #> [1] 103.0842 130.5466  streamfunction(w, c(50, 0), c(-25, 25)) #> [1] -56.28330  86.42003"},{"path":"https://cneyens.github.io/raem/reference/tracelines.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute tracelines of particles — tracelines","title":"Compute tracelines of particles — tracelines","text":"tracelines() tracks particle locations moving forward backward advective groundwater flow numerically integrating velocity vector. resulting set connected coordinates produces tracelines. endpoints() obtains final time locations tracked particles.","code":""},{"path":"https://cneyens.github.io/raem/reference/tracelines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute tracelines of particles — tracelines","text":"","code":"tracelines(   aem,   x0,   y0,   z0,   times,   forward = TRUE,   R = 1,   tfunc = NULL,   tol = 0.001,   ncores = 0,   ... )  endpoints(tracelines, ...)  # S3 method for class 'tracelines' plot(x, y = NULL, add = FALSE, type = \"l\", arrows = FALSE, marker = NULL, ...)"},{"path":"https://cneyens.github.io/raem/reference/tracelines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute tracelines of particles — tracelines","text":"aem aem object. x0 numeric vector starting x locations particles. y0 numeric vector starting y locations particles. z0 numeric vector starting z locations particles. times numeric vector times particle locations registered. forward logical, forward (TRUE; default) backward (FALSE) tracking performed. R numeric, retardation coefficient passed velocity(). Defaults 1 (retardation). tfunc function list functions additional termination events particles. See details. Defaults NULL. tol numeric tolerance used define particles crossed line element. Defaults 0.001 length units. ncores integer, number cores use running parallel. Defaults 0 (parallel computing). See details. ... additional arguments passed plot() arrows() plotting. Otherwise ignored. tracelines object class tracelines returned tracelines(). x object class tracelines. y ignored add logical, plot added existing plot? Defaults FALSE. type character indicating type plot draw. See plot(). Defaults 'l' (lines). arrows logical indicating arrows drawn using arrows(). Defaults FALSE. marker numeric, time interval plot point markers. Defaults NULL (markers). See details.","code":""},{"path":"https://cneyens.github.io/raem/reference/tracelines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute tracelines of particles — tracelines","text":"tracelines() returns object class tracelines list length equal number particles list element contains matrix columns time, x, y z specifying registered time coordinates particle tracked flow field. final row represents either location maximum times value , particle terminated prematurely, time location termination. matrices ordered increasing time. connecting coordinates, tracelines can produced. endpoints() returns matrix columns time, x, y z specifying final time coordinates particles tracelines object.","code":""},{"path":"https://cneyens.github.io/raem/reference/tracelines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute tracelines of particles — tracelines","text":"deSolve::lsoda() used numerically integrate velocity vector. Particles terminated prematurely reached inner annulus well elements, crossed line element (enter half non-zero width either side) travel saturated aquifer level (.e. water-table unconfined conditions aquifer top confined conditions), aquifer base. Note last two conditions can occur models vertical flow components. returned time value time termination. tfunc argument can used specify additional termination events. function (list functions) takes arguments t, coords parms. , respectively, numeric value current tracking time, numeric vector length 3 current x, y z coordinate particle, list elements aem R (named ). return single logical value indicating particle terminate. See examples. initial particle locations saturated aquifer level, reset elevation warning. Initial particle locations aquifer base reset aquifer base warning. small perturbation added elevations avoid particle tracking algorithm get stuck locations. algorithm get stuck (.e. excessive run-times), try resetting z0 values elevations well inside saturated domain. Initial particle locations inside termination point dropped warning. Backward particle tracking performed reversing flow field (.e. multiplying velocities -1). Traceline computation embarrassingly parallel. ncores > 0, parallel package used set cluster requested nodes tracelines computed using parallel::parLapplyLB(). ncores exceed number available cores returned parallel::detectCores().","code":""},{"path":"https://cneyens.github.io/raem/reference/tracelines.html","id":"plotting","dir":"Reference","previous_headings":"","what":"Plotting","title":"Compute tracelines of particles — tracelines","text":"marker value can used plot point markers given time intervals, e.g. every 365 days (see examples). x y locations particle marked times obtained linearly interpolating computed particle locations.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/tracelines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute tracelines of particles — tracelines","text":"","code":"# create a model with uniform background flow k <- 10 top <- 10; base <- 0 n <- 0.2 R <- 5 hc <- 20  uf <- uniformflow(TR = 100, gradient = 0.001, angle = -10) rf <- constant(TR, xc = -1000, yc = 0, hc = hc)  m <- aem(k, top, base, n = n, uf, rf)  # calculate forward particle traces x0 <- -200; y0 <- seq(-200, 200, 200) times <- seq(0, 25 * 365, 365 / 4) paths <- tracelines(m, x0 = x0, y0 = y0, z = top, times = times) endp <- endpoints(paths)  xg <- seq(-500, 500, length = 100) yg <- seq(-300, 300, length = 100)  # plot contours(m, xg, yg, col = 'dodgerblue', nlevels = 20) plot(paths, add = TRUE, col = 'orange') points(endp[, c('x', 'y')])  # Backward tracking with retardation; plot point marker every 5 years paths_back <- tracelines(m, x0 = x0, y0 = y0, z0 = top, times = times, R = R, forward = FALSE) plot(paths_back, add = TRUE, col = 'forestgreen', marker = 5*365, cex = 0.5)   # ------- # Termination at wells, line-sinks and user-defined zone w1 <- well(200, 50, Q = 250) w2 <- well(-200, -100, Q = 450) ls <- headlinesink(x0 = -100, y0 = 100, x1 = 400, y1 = -300, hc = 7)  m <- aem(k, top, base, n = n, uf, rf, w1, w2, ls)  # User-defined termination in rectangular zone tzone <- cbind(x = c(-300, -200, -200, -300), y = c(150, 150, 100, 100)) termf <- function(t, coords, parms) {   x <- coords[1]   y <- coords[2]   in_poly <- x <= max(tzone[,'x']) & x >= min(tzone[,'x']) &     y <= max(tzone[,'y']) & y >= min(tzone[,'y'])   return(in_poly) }  x0 <- c(-300, -200, 0, 200, 300) y0 <- 200 times <- seq(0, 5 * 365, 365 / 15) paths <- tracelines(m, x0 = x0, y0 = y0, z0 = top, times = times, tfunc = termf)  contours(m, xg, yg, col = 'dodgerblue', nlevels = 20) plot(m, add = TRUE) polygon(tzone) plot(paths, add = TRUE, col = 'orange')   # ------- # model with vertical flow due to area-sink as <- areasink(xc = 0, yc = 0, N = 0.001, R = 1500) m <- aem(k, top, base, n = n, uf, rf, w1, w2, as)  # starting z0 locations are above aquifer top and will be reset to top with warning x0 <- seq(-400, 200, 200); y0 <- 200 times <- seq(0, 5 * 365, 365 / 4) paths <- tracelines(m, x0 = x0, y0 = y0, z0 = top + 0.5, times = times) #> Warning: Resetting z0 values above saturated aquifer level or below aquifer base  contours(m, xg, yg, col = 'dodgerblue', nlevels = 20) plot(m, add = TRUE) plot(paths, add = TRUE, col = 'orange')   # ------- # plot vertical cross-section of traceline 4 along increasing y-axis (from south to north) plot(paths[[4]][,c('y', 'z')], type = 'l')   # ------- # parallel computing by setting ncores > 0 mp <- aem(k, top, base, n = n, uf, rf) pathsp <- tracelines(mp, x0 = x0, y0 = y0, z = top, times = times, ncores = 2)  # ------- # plot arrows contours(m, xg, yg, col = 'dodgerblue', nlevels = 20) plot(paths, add = TRUE, col = 'orange', arrows = TRUE, length = 0.05)   # plot point markers every 2.5 years contours(m, xg, yg, col = 'dodgerblue', nlevels = 20) plot(paths, add = TRUE, col = 'orange', marker = 2.5 * 365, pch = 20)  # plot point markers every 600 days plot(paths, add = TRUE, col = 'forestgreen', marker = 600, pch = 1)"},{"path":"https://cneyens.github.io/raem/reference/uniformflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an analytic element with uniform flow — uniformflow","title":"Create an analytic element with uniform flow — uniformflow","text":"uniformflow() creates analytic element constant uniform background flow.","code":""},{"path":"https://cneyens.github.io/raem/reference/uniformflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an analytic element with uniform flow — uniformflow","text":"","code":"uniformflow(TR, gradient, angle, ...)"},{"path":"https://cneyens.github.io/raem/reference/uniformflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an analytic element with uniform flow — uniformflow","text":"TR numeric, constant transmissivity value used define discharge. gradient numeric, hydraulic gradient. Positive direction flow. angle numeric, angle primary direction background flow degrees counterclockwise x-axis. ... ignored","code":""},{"path":"https://cneyens.github.io/raem/reference/uniformflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an analytic element with uniform flow — uniformflow","text":"Analytic element constant uniform flow object class uniformflow inherits element.","code":""},{"path":"https://cneyens.github.io/raem/reference/uniformflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an analytic element with uniform flow — uniformflow","text":"TR gradient multiplied obtain discharge remains constant throughout system, independent saturated thickness aquifer. Groundwater flow always direction negative hydraulic gradient. Note gradient specified positive direction flow convenience.","code":""},{"path":"https://cneyens.github.io/raem/reference/uniformflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an analytic element with uniform flow — uniformflow","text":"","code":"uf <- uniformflow(TR = 100, gradient = 0.002, angle = -45) # South-eastern direction"},{"path":"https://cneyens.github.io/raem/reference/well.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an analytic element of a constant-discharge well — well","title":"Create an analytic element of a constant-discharge well — well","text":"well() creates analytic element well constant discharge.","code":""},{"path":"https://cneyens.github.io/raem/reference/well.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an analytic element of a constant-discharge well — well","text":"","code":"well(xw, yw, Q, rw = 0.3, ...)"},{"path":"https://cneyens.github.io/raem/reference/well.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an analytic element of a constant-discharge well — well","text":"xw numeric, x location well. yw numeric, y location well. Q numeric, volumetric discharge well (positive aquifer). rw numeric, radius well. Defaults 0.3 length units. ... ignored","code":""},{"path":"https://cneyens.github.io/raem/reference/well.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an analytic element of a constant-discharge well — well","text":"Analytic element well constant discharge object class well inherits element.","code":""},{"path":"https://cneyens.github.io/raem/reference/well.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an analytic element of a constant-discharge well — well","text":"inner annulus well element constitutes singularity equations hydraulic head undefined distance smaller rw well center. state- flow-variable calculated within annulus, location reset nearest location well screen. well assumed fully penetrate saturated aquifer.","code":""},{"path":[]},{"path":"https://cneyens.github.io/raem/reference/well.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an analytic element of a constant-discharge well — well","text":"","code":"w <- well(xw = 50, yw = 0, Q = 200, rw = 0.3)"},{"path":"https://cneyens.github.io/raem/news/index.html","id":"raem-010","dir":"Changelog","previous_headings":"","what":"raem 0.1.0","title":"raem 0.1.0","text":"Initial CRAN submission.","code":""}]
