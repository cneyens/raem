% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/state-variables.R
\name{state-variables}
\alias{state-variables}
\alias{omega}
\alias{potential}
\alias{streamfunction}
\alias{omega.aem}
\alias{potential.aem}
\alias{streamfunction.aem}
\alias{omega.element}
\alias{potential.element}
\alias{streamfunction.element}
\alias{heads}
\title{Calculate state-variables}
\usage{
omega(...)

potential(...)

streamfunction(...)

\method{omega}{aem}(aem, x, y, as.grid = FALSE, ...)

\method{potential}{aem}(aem, x, y, as.grid = FALSE, ...)

\method{streamfunction}{aem}(aem, x, y, as.grid = FALSE, ...)

\method{omega}{element}(element, x, y, ...)

\method{potential}{element}(element, x, y, ...)

\method{streamfunction}{element}(element, x, y, ...)

heads(aem, x, y, as.grid = FALSE, na.below = TRUE, ...)
}
\arguments{
\item{...}{ignored}

\item{aem}{\code{aem} object}

\item{x}{numeric x coordinates to evaluate at}

\item{y}{numeric y coordinates to evaluate at}

\item{as.grid}{logical, should a matrix of dimensions c(\verb{length(y), length(x)}) be returned? Defaults to \code{FALSE}.}

\item{element}{analytic element of class \code{element}}

\item{na.below}{logical indicating if calculated head values below the aquifer base should be set to \code{NA}. Defaults to \code{TRUE}. See \code{\link[=potential_to_head]{potential_to_head()}}.}
}
\value{
For \code{\link[=omega]{omega()}}, a vector of \code{length(x)} (equal to \code{length(y)}) with the complex potential values at \code{x} and \code{y}.
If \code{as.grid = TRUE}, a matrix of dimensions \code{c(length(y), length(x))} described by
marginal vectors \code{x} and \code{y} containing the complex potential values at the grid points.

For \code{\link[=potential]{potential()}}, the same as for \code{\link[=omega]{omega()}} but containing the discharge potential values
evaluated at \code{x} and \code{y}, which are the real components of \code{\link[=omega]{omega()}}.

For \code{\link[=streamfunction]{streamfunction()}}, the same as for \code{\link[=omega]{omega()}} but containing the streamfunction values
evaluated at \code{x} and \code{y}, which are the imaginary components of \code{\link[=omega]{omega()}}.

For \code{\link[=heads]{heads()}}, the same as for \code{\link[=omega]{omega()}} but containing the hydraulic head values
evaluated at \code{x} and \code{y}, which are computed from \code{\link[=potential]{potential()}} and the aquifer parameters using \code{\link[=potential_to_head]{potential_to_head()}}.
}
\description{
\code{\link[=omega]{omega()}} computes the complex potential for an \code{aem} or \code{element} object
at the given x and y coordinates.

\code{\link[=potential]{potential()}} computes the discharge potential for an \code{aem} or \code{element} object
at the given x and y coordinates.

\code{\link[=streamfunction]{streamfunction()}} computes the streamfunction for an \code{aem} or \code{element} object
at the given x and y coordinates.

\code{\link[=heads]{heads()}} computes the hydraulic head at the given x and y coordinates.
}
\details{
\code{\link[=heads]{heads()}} should not to be confused with \code{\link[utils:head]{utils::head()}}, which returns the first part of an object.
}
\examples{

w <- well(xw = 50, yw = 0, Q = 200)
uf <- uniformflow(gradient = 0.002, angle = -45, TR = 100)
ml <- aem(k = 10, top = 10, base = 0, n = 0.2, w, uf)

omega(ml, c(50, 0), c(25, -25))

xg <- seq(-100, 100, length = 500)
yg <- seq(-75, 75, length = 100)
omega(ml, xg, yg, as.grid = TRUE)

potential(ml, c(50, 0), c(25, -25))
potential(ml, xg, yg, as.grid = TRUE)

streamfunction(ml, c(50, 0), c(25, -25))
streamfunction(ml, xg, yg, as.grid = TRUE)

# For elements
omega(w, c(50, 0), c(-25, 25))

potential(w, c(50, 0), c(-25, 25))

streamfunction(w, c(50, 0), c(-25, 25))

heads(ml, c(50, 0), c(25, -25))
heads(ml, xg, yg, as.grid = TRUE)

# do not confuse heads() with utils::head, which will give an error
try(
head(ml, c(50, 0), c(25, -25))
)

}
\seealso{
\code{\link[=flow]{flow()}}, \code{\link[=satthick]{satthick()}}, \code{\link[=head_to_potential]{head_to_potential()}}
}
